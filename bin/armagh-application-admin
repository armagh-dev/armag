#!/usr/bin/env ruby
require 'sinatra'
require 'thin'
require 'json'
require 'log4r'

require_relative '../lib/environment.rb'
Armagh::Environment.init

require_relative '../lib/admin/application/api.rb'
require_relative '../lib/admin/application/thin_backend.rb'
require_relative '../lib/configuration/file_based_configuration.rb'
require_relative '../lib/logging'

Process.setproctitle(File.basename(__FILE__))

#------------------------------------------------------------------------------------------------
#
# SET UP ENVIRONMENT
#
#------------------------------------------------------------------------------------------------

include Armagh

api = Admin::Application::API.instance

configure do
  
  if ENV[ 'ARMAGH_ENV' ] == 'PRODUCTION'
    set :environment, :production
  else
    set :environment, :development
    set :show_exceptions, :after_handler
  end
  set :bind,   api.ip
  set :port,   api.port
  set :server, "thin"
  set :root,   api.root_directory
  set :run,    true
  class << settings
  
    def server_settings
      
      api = Admin::Application::API.instance
    
      settings = { :backend => Admin::Application::ThinBackend }
      if api.using_ssl?
        settings.merge!( {
          :private_key_file => api.key_filepath,           
          :cert_chain_file  => api.cert_filepath, 
          :verify_peer      => api.verify_peer
        })
      end
      settings
    end
  end
end # end configure

enable :sessions, :logging

use Rack::CommonLogger, api.logger
use Rack::Auth::Basic, "Armagh Admin" do |username, password|
 api.authenticate_and_authorize username, password
end # use Rack::Auth::Basic

 
helpers do
end

get '/status.json' do

  status = []
  begin
    status = api.get_status
  rescue => e
    return[ 200, { 'error_detail' => e.message }.to_json ]
  end
  return[ 200, status.to_json ]
end

post '/launcher.json' do
  
  begin
    new_config = {}
    config_hash = eval( params[ 'launcher' ] )
    new_config = api.create_launcher_configuration( { 'launcher' => config_hash } )
  rescue => e
    api.logger.error( "in application_admin post /launcher.json with params #{ params.inspect }: #{ e.message }" )
    return [ 500, { 'error_detail' => e.message }.to_json ]
  end
  return [ 200, new_config.to_json ]
end

post '/action.json' do
  
  begin
    api.logger.debug( 'armagh-application-admin post action.json...')
    api.logger.debug( "... with params: #{ params.inspect }")
    new_config = {}
    config_hash = eval( params[ 'action' ])    
    raise ArgumentError, "must include params[ 'action' ] => hash in call. params is: #{ params.inspect }" unless config_hash.is_a?( Hash )
    result = api.create_action_configuration( config_hash )
  rescue => e
    api.logger.error( "in application_admin post /action.json with params #{ params.inspect }: #{ e.message }" )
    return [ 200, { 'error_detail' => e.message }.to_json ]
  end
  return [ 200, "success".to_json ]
end

get '/actions.json' do
  #TODO implement
end

post '/actions/activate.json' do
  
  begin
    api.logger.debug( 'armagh-application-admin post actions/activate.json...')
    api.logger.debug( "... with params: #{ params.inspect }")
    
    api.activate_actions( params )
  rescue => e
    error_response = { 'error_detail' => e.message, :backtrace => e.backtrace.join("\n")}
    api.logger.error( "in application_admin post /actions/activate.json with params #{ params.inspect }: #{ e.message }" )
    return [ 200, error_response.to_json ]
  end
  return [ 200, "success".to_json ]
end

get '/documents/counts.json' do
  
  counts = []
  begin
    counts = api.get_document_counts
    return [200, counts.to_json]
  rescue => e
    return [ 200, { 'error_detail' => e.message }.to_json ]
  end
end

get '/documents.json' do
  
  begin
    
    api.logger.debug( "armagh-applications-admin get documents" )
    api.logger.debug( "... with params #{ params.inspect }")
    
    doc_type = params[ 'doc_type' ]
    begin_ts = Time.parse( params[ 'begin_ts' ] ) if params.include? 'begin_ts'
    end_ts   = Time.parse( params[ 'end_ts' ] ) if params.include? 'end_ts'
    start_index = params[ 'start_index' ].to_i if params.include? 'start_index'
    max_returns = params[ 'max_returns' ].to_i if params.include? 'max_returns'
  
    doc_list = api.get_documents( doc_type, begin_ts, end_ts, start_index, max_returns )
    return [ 200, doc_list.to_json ]
    
  rescue => e
    api.logger.error( "in application_admin get /documents.json with params #{ params.inspect }: #{ e.message }" )
    return [ 200, { 'error_detail' => e.message }.to_json ]
  end
end

get '/document.json' do
  
  begin
    
    api.logger.debug( "armagh-application-admin get document" )
    api.logger.debug( "... with params #{ params.inspect }" )
    
    doc_id = params[ 'document_id' ]
    doc_type = params[ 'type' ]
    doc = api.get_document( doc_id, doc_type )
    return [ 200, doc.to_json ]
    
  rescue => e
    api.logger.error( "in application_admin get /document.json with params #{ params.inspect }: #{ e.message }" )
    return [ 200, { 'error_detail' => e.message }.to_json ]
  end
end

get '/documents/failures.json' do
  begin
    doc_list = api.get_failed_documents
    return [200, doc_list.to_json]
  rescue => e
    api.logger.error( "in application_admin get /documents/failures.json: #{ e.message }" )
    return [ 200, { 'error_detail' => e.message }.to_json ]
  end
end