#!/usr/bin/env ruby

# Copyright 2018 Noragh Analytics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'sinatra'
require 'puma'
require 'json'

require 'armagh/logging'

require_relative '../lib/armagh/environment.rb'
Armagh::Environment.init

require_relative '../lib/armagh/admin/application/api'
require_relative '../lib/armagh/configuration/file_based_configuration'
require_relative '../lib/armagh/connection'

require_relative '../lib/armagh/utils/rest_helper'

Process.setproctitle(File.basename(__FILE__))

#------------------------------------------------------------------------------------------------
#
# SET UP ENVIRONMENT
#
#------------------------------------------------------------------------------------------------

include Armagh

api = Admin::Application::API.instance
rest_helper = Utils::RestHelper.new(api.logger, 'Application Admin API')

Connection.setup_indexes

Authentication.setup_authentication

configure do

  if ENV[ 'ARMAGH_ENV' ] == 'PRODUCTION'
    set :environment, :production
    set :show_exceptions, false
  else
    set :environment, :development
    set :show_exceptions, :after_handler
  end

  set :bind,   api.ip
  set :port,   api.port
  set :server, 'puma'
  set :root,   api.root_directory
  set :run,    true
  class << settings

    def server_settings

      api = Admin::Application::API.instance

      settings = {}
      if api.using_ssl?
        settings.merge!( {
                             :private_key_file => api.key_filepath,
                             :cert_chain_file  => api.cert_filepath,
                             :verify_peer      => api.verify_peer
                         })
      end
      settings
    end
  end
end # end configure

before do
  rest_helper.headers = headers
end

enable :sessions, :logging

set :session_secret, 'arm-866w(c@n$f2pv+8sgg7&y_i#c+6!-d(u&f*dec7sp!ju*a%9*a'

use Rack::CommonLogger, api.logger

#------------------------------------------------------------------------------------------------
#
# REST API
#
#------------------------------------------------------------------------------------------------

get '/' do
  rest_helper.handle_request(request) do |_fields, _remote_user|
    'Armagh Application Admin API'
  end
end

#------------------------------
#
# status
#
#------------------------------

get '/agent_status.json' do
  rest_helper.handle_request(request) do |_fields, _remote_user|
    api.get_agent_status
  end
end

get '/launcher_status.json' do
  rest_helper.handle_request(request) do |_fields, _remote_user|
    api.get_launcher_status
  end
end

get '/status.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_status
  end
end


#------------------------------
#
# workflow
#
#------------------------------

# list of workflows with status
get '/workflows.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_workflows(include_retired: params['include_retired']&.downcase == 'true')
  end
end

# create new workflow
post '/workflow/:workflow_name/new.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    workflow = api.create_workflow({'workflow' => {'name' => params['workflow_name']}})
    workflow.name
  end
end

# status for existing workflow
get '/workflow/:workflow_name/status.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_workflow_status(params['workflow_name'], include_retired: params['include_retired']&.downcase == 'true')
  end
end

# update workflow: run
patch '/workflow/:workflow_name/run.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.run_workflow(params['workflow_name'])
  end
end

# update workflow: finish
patch '/workflow/:workflow_name/finish.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.finish_workflow(params['workflow_name'])
  end
end

# update workflow: stop
patch '/workflow/:workflow_name/stop.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.stop_workflow(params['workflow_name'])
  end
end

# import workflow
post '/workflow/import.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    api.import_workflow(fields)
  end
end

# export workflow
get '/workflow/?:workflow_name?/export.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.export_workflow(params['workflow_name'])
  end
end

# retire workflow
patch '/workflow/:workflow_name/retire.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.retire_workflow(params['workflow_name'], true)
  end
end

# unretire workflow
patch '/workflow/:workflow_name/unretire.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.retire_workflow(params['workflow_name'], false)
  end
end

#------------------------------
#
# workflow actions
#
#------------------------------

# list of defined action classes
get '/actions/defined.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_defined_actions
  end
end

# Trigger a collect
patch '/actions/trigger_collect.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.check_params(params, 'name')
    api.trigger_collect(params['name'])
  end
end

# Trigger a consume
patch '/actions/mark_for_consume.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    api.check_params(fields, 'name')
    action = fields['name']

    if fields['type'] && fields['version']
      # All documents of a type/version
      api.mark_consume_version(action, fields['type'], fields['version'])
    elsif fields['type'] && fields['id']
      # Individual Document
      api.mark_consume_id(action, fields['type'], fields['id'])
    elsif fields['documents'] && fields['documents'].is_a?(Array) && fields['documents'].all?{|i| i.key?('id') && i.key?('type')}
      # A list of documents
      api.mark_consume_multiple_id(action, fields['documents'])
    else
      raise Admin::Application::APIClientError, 'Request body must contain either a type and version, a type and document id, or a documents array each containing a type and id.'
    end
  end
end

# list of workflow actions with status
get '/workflow/:workflow_name/actions.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_workflow_actions(params['workflow_name'], include_retired: params['include_retired']&.downcase == 'true')
  end
end

# status for existing workflow action
get '/workflow/:workflow_name/action/:action_name/status.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_workflow_action_status(params['workflow_name'], params['action_name'])
  end
end

# edit form for new workflow action
get '/workflow/:workflow_name/action/config.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.check_params(params, 'type')
    api.new_workflow_action_config(params['workflow_name'], params['type'] )
  end
end

# edit form for existing workflow action
get '/workflow/:workflow_name/action/:action_name/description.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_workflow_action_description(params['workflow_name'], params['action_name'], include_retired: params['include_retired']&.downcase == 'true')
  end
end

# config for existing workflow action
get '/workflow/:workflow_name/action/:action_name/config.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_workflow_action_config(params['workflow_name'], params['action_name'])
  end
end

# submit params to create workflow action
post '/workflow/:workflow_name/action/config.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    type = fields.delete 'type'
    api.create_workflow_action_config(params['workflow_name'], type, fields)
  end
end

# submit params to change existing action config
put '/workflow/:workflow_name/action/:action_name/config.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    api.update_workflow_action_config(params['workflow_name'], params['action_name'], fields )
  end
end

# get defined group test callbacks
get '/test/:type/callbacks.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_action_test_callbacks(params['type'])
  end
end

# invoke action test callback
patch '/test/invoke_callback.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    api.invoke_action_test_callback(fields)
  end
end

# retire action
patch '/workflow/:workflow_name/action/:action_name/retire.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.retire_action(params['workflow_name'], params['action_name'])
  end
end

# unretire action
patch '/workflow/:workflow_name/action/:action_name/unretire.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.unretire_action(params['workflow_name'], params['action_name'])
  end
end

# encode string
get '/string/encode.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.encode_string(params['string'])
  end
end

# decode string
get '/string/decode.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.decode_string(params['string'])
  end
end

#---------------------
#
# documents
#
#---------------------

get '/documents.json' do
  rest_helper.handle_request(request) do |_fields, remote_user|
    api.check_params(params, 'type')
    doc_type = params['type']

    api.user_has_document_role(remote_user, doc_type)

    begin_ts = Time.parse(params['begin_ts']) if params.include? 'begin_ts'
    end_ts = Time.parse(params['end_ts']) if params.include? 'end_ts'
    start_index = params['start_index'].to_i if params.include? 'start_index'
    max_returns = params['max_returns'].to_i if params.include? 'max_returns'

    api.get_documents(doc_type, begin_ts, end_ts, start_index, max_returns)
  end
end

get '/document.json' do
  rest_helper.handle_request(request) do |_fields, remote_user|
    api.check_params(params, %w(id type))

    doc_type = params['type']
    api.user_has_document_role(remote_user, doc_type)

    doc_id = params['id']


    api.get_document(doc_id, doc_type)
  end
end

get '/documents/failures.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_failed_documents
  end
end

#---------------------
#
# Version
#
#---------------------

get '/version.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_version
  end
end

#---------------------
#
# User/Group/Role
#
#---------------------

get '/users.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.get_users
  end
end

get '/user/:user_id.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN, params['user_id']) do |_fields, _remote_user|
    api.get_user(params['user_id'])
  end
end

put '/user/:user_id.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN, params['user_id']) do |fields, _remote_user|
    api.update_user_by_id(params['user_id'], fields)
  end
end

post '/user/create.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |fields, _remote_user|
    api.create_user(fields)
  end
end

get '/user/:user_id/join_group.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.check_params(params, 'group_id')
    api.user_join_group(params['user_id'], params['group_id'], remote_user)
  end
end

get '/user/:user_id/leave_group.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.check_params(params, 'group_id')
    api.user_leave_group(params['user_id'], params['group_id'], remote_user)
  end
end

get '/user/:user_id/add_role.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.check_params(params, 'role_key')
    api.user_add_role(params['user_id'], params['role_key'], remote_user)
  end
end

get '/user/:user_id/remove_role.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.check_params(params, 'role_key')
    api.user_remove_role(params['user_id'], params['role_key'], remote_user)
  end
end

delete '/user/:user_id.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.delete_user(params['user_id'])
  end
end

get '/user/:user_id/reset_password.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.user_reset_password(params['user_id'], remote_user)
  end
end

get '/user/:user_id/lock_out.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.user_lock_out(params['user_id'])
  end
end

get '/user/:user_id/remove_lock_out.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.user_remove_lock_out(params['user_id'])
  end
end

get '/user/:user_id/enable.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.user_enable(params['user_id'])
  end
end

get '/user/:user_id/disable.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.user_disable(params['user_id'])
  end
end

get '/groups.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.get_groups
  end
end

get '/group/:group_id.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.get_group(params['group_id'])
  end
end

put '/group/:group_id.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |fields, _remote_user|
    api.update_group(params['group_id'], fields)
  end
end

get '/group/:group_id/add_user.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.check_params(params, 'user_id')
    api.group_add_user(params['group_id'], params['user_id'], remote_user)
  end
end

get '/group/:group_id/remove_user.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.check_params(params, 'user_id')
    api.group_remove_user(params['group_id'], params['user_id'], remote_user)
  end
end

post '/group/create.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |fields, _remote_user|
    api.create_group(fields)
  end
end

get '/group/:group_id/add_role.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.check_params(params, 'role_key')
    api.group_add_role(params['group_id'], params['role_key'], remote_user)
  end
end

get '/group/:group_id/remove_role.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.check_params(params, 'role_key')
    api.group_remove_role(params['group_id'], params['role_key'], remote_user)
  end
end

delete '/group/:group_id.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, remote_user|
    api.delete_group(params['group_id'], remote_user)
  end
end

get '/roles.json' do
  rest_helper.handle_request(request, Authentication::Role::USER_ADMIN) do |_fields, _remote_user|
    api.get_roles
  end
end

#---------------------
#
# Authentication
#
#---------------------

get '/authenticate.json' do
  rest_helper.handle_request(request) do |_fields, remote_user|
    remote_user
  end
end

get '/user.json' do
  rest_helper.handle_request(request) do |_fields, remote_user|
    remote_user
  end
end

put '/user.json' do
  rest_helper.handle_request(request) do |fields, remote_user|
    api.update_user(remote_user, fields)
  end
end

post '/update_password.json' do
  rest_helper.handle_request(request) do |fields, remote_user|
    api.check_params(fields, 'password')
    api.update_password(remote_user, fields['password'])
  end
end

#---------------------
#
# Configuration
#
#---------------------

get '/configuration/launchers.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_all_launcher_configurations
  end
end

get '/configuration/launcher/:launcher_name.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_launcher_configuration(params['launcher_name'])
  end
end

post '/configuration/launcher/:launcher_name.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    api.create_or_update_launcher_configuration(params['launcher_name'], fields)
  end
end

get '/configuration/agent.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_agent_configuration
  end
end

post '/configuration/agent.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    api.create_or_update_agent_configuration(fields)
  end
end

get '/configuration/authentication.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_authentication_configuration
  end
end

post '/configuration/authentication.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    api.create_or_update_authentication_configuration(fields)
  end
end

get '/configuration/archive.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |_fields, _remote_user|
    api.get_archive_configuration
  end
end

post '/configuration/archive.json' do
  rest_helper.handle_request(request, Authentication::Role::APPLICATION_ADMIN) do |fields, _remote_user|
    api.create_or_update_archive_configuration(fields)
  end
end
