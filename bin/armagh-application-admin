#!/usr/bin/env ruby
require 'sinatra'
require 'thin'
require 'json'
require 'log4r'

require_relative '../lib/environment.rb'
Armagh::Environment.init

require_relative '../lib/admin/application/api.rb'
require_relative '../lib/admin/application/thin_backend.rb'
require_relative '../lib/configuration/file_based_configuration.rb'
require_relative '../lib/logging'

#------------------------------------------------------------------------------------------------
#
# SET UP ENVIRONMENT
#
#------------------------------------------------------------------------------------------------

include Armagh

api = Admin::Application::API.instance

configure do
  
  if ENV[ 'ARMAGH_ENV' ] == 'PRODUCTION'
    set :environment, :production
  else
    set :environment, :development
    set :show_exceptions, :after_handler
  end
  set :bind,   api.ip
  set :port,   api.port
  set :server, "thin"
  set :root,   api.root_directory
  set :run,    true
  class << settings
  
    def server_settings
      
      api = Admin::Application::API.instance
    
      settings = { :backend => Admin::Application::ThinBackend }
      if api.using_ssl?
        settings.merge!( {
          :private_key_file => api.key_filepath,           
          :cert_chain_file  => api.cert_filepath, 
          :verify_peer      => api.verify_peer
        })
      end
      settings
    end
  end
end # end configure

enable :sessions, :logging

use Rack::CommonLogger, api.logger
use Rack::Auth::Basic, "Armagh Admin" do |username, password|
 api.authenticate_and_authorize username, password
end # use Rack::Auth::Basic

 
helpers do
  
  def route_after_success( format, message, html_redirect_to )
    case format
    when 'json'
      return [ 200, { :message => message }.to_json ]
    when 'html'
      session[ 'message' ] = error_detail
      redirect to( html_redirect_to )
    end
  end
  
  def route_after_error( format, error_detail, html_redirect_to )
    api.logger.error( error_detail )
    case format
    when 'json'
      return [ 200, { :error_detail => error_detail }.to_json ]
    when 'html'
      session[ 'message' ] = error_detail
      redirect to( html_redirect_to )
    end
  end
  
end

error 500 do
  return[ 500, { :error_detail => env[ 'sinatra.error' ].message,
                 :backtrace => env[ 'sinatra.error' ].backtrace.join("\n")}]
end

#------------------------------------------------------------------------------------------------
#
# GET /noop
#
#------------------------------------------------------------------------------------------------
get '/noop.?:format?' do
  
  @message = session.delete 'message'
  
  case params[ 'format' ]
  when 'json'
    return [ 200, { result: 'way to go!'}.to_json ]
  when 'html'
    erb "/views-subdir/page.html".to_sym #.erb
  end
end

post '/noop.?:format?' do
  
  obj_params = params[ 'form_object' ]
  begin
    do_something( obj_params )
  rescue => e
    return route_after_error( params[ 'format' ], e.message, '/some/url' )
  end
  return route_after_success( params[ 'format' ], "You did something right!", '/noop')
end

get '/status.json' do

  status = []
  begin
    status = api.get_status
  rescue => e
    return[ 200, { :error_detail => e.message }.to_json ]
  end
  return[ 200, status.to_json ]
end

get '/document_counts.json' do
  
  counts = []
  begin
    counts = api.get_document_counts
  rescue => e
    return [ 200, { :error_detail => e.message }.to_json ]
  end
end

post '/configure_launcher.json' do
  
  begin
    new_config = {}
    config_hash = eval( params[ 'launcher' ])
    raise ArgumentError, "must include params[ 'launcher' ] => hash in call. params is: #{ params.inspect }" unless config_hash.is_a?( Hash )
    new_config = api.configure_launcher( { 'launcher' => config_hash } )
  rescue => e
    return[ 200, { :error_detail => e.message }.to_json ]
  end
  return[ 200, new_config.to_json ]
end

post '/create_action_configuration.json' do
  
  begin
    api.logger.debug( 'armagh-application-admin post create_action_configuration.json...')
    api.logger.debug( "... with params: #{ params.inspect }")
    new_config = {}
    config_hash = eval( params[ 'action' ])    
    raise ArgumentError, "must include params[ 'action' ] => hash in call. params is: #{ params.inspect }" unless config_hash.is_a?( Hash )
    result = api.create_action_configuration( config_hash )
  rescue => e
    return[ 200, { :error_detail => e.message }.to_json ]
  end
  return[ 200, "success".to_json ]
end