#!/usr/bin/env ruby

# Copyright 2017 Noragh Analytics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'sinatra'
require 'thin'
require 'json'
require 'log4r'

require_relative '../lib/environment.rb'
Armagh::Environment.init

require_relative '../lib/admin/application/api'
require_relative '../lib/admin/application/thin_backend'
require_relative '../lib/configuration/file_based_configuration'
require_relative '../lib/connection'
require_relative '../lib/logging'

require_relative '../lib/utils/rest_helper'

Process.setproctitle(File.basename(__FILE__))

#------------------------------------------------------------------------------------------------
#
# SET UP ENVIRONMENT
#
#------------------------------------------------------------------------------------------------

include Armagh

Connection.setup_indexes

api = Admin::Application::API.instance
rest_helper = Utils::RestHelper.new(api.logger)

Authentication::User.setup_default_users
Authentication::Group.setup_default_groups

configure do

  if ENV[ 'ARMAGH_ENV' ] == 'PRODUCTION'
    set :environment, :production
  else
    set :environment, :development
    set :show_exceptions, :after_handler
  end

  set :bind,   api.ip
  set :port,   api.port
  set :server, "thin"
  set :root,   api.root_directory
  set :run,    true
  class << settings

    def server_settings

      api = Admin::Application::API.instance

      settings = { :backend => Admin::Application::ThinBackend }
      if api.using_ssl?
        settings.merge!( {
                             :private_key_file => api.key_filepath,
                             :cert_chain_file  => api.cert_filepath,
                             :verify_peer      => api.verify_peer
                         })
      end
      settings
    end
  end
end # end configure

enable :sessions, :logging

set :session_secret, 'arm-866w(c@n$f2pv+8sgg7&y_i#c+6!-d(u&f*dec7sp!ju*a%9*a'

use Rack::CommonLogger, api.logger

use Rack::Auth::Basic, 'Armagh Admin' do |username, password|
  api.authenticate_and_authorize username, password
end # use Rack::Auth::Basic

#------------------------------------------------------------------------------------------------
#
# REST API
#
#------------------------------------------------------------------------------------------------

helpers do
end

get '/status.json' do
  rest_helper.handle_request(request) do |fields|
    api.get_status
  end
end

#------------------------------
#
# launcher
#
#------------------------------
post '/launcher.json' do
  rest_helper.handle_request(request ) do |fields|
    api.create_or_update_launcher_configuration(fields)
  end
end

#------------------------------
#
# agent
#
#------------------------------

post '/agent.json' do
  # TODO Agent configuration
end

#------------------------------
#
# workflow
#
#------------------------------

# list of workflows with status
get '/workflows.json' do
  rest_helper.handle_request(request) do |fields|
    api.get_workflows
  end
end

# create new workflow
get '/workflow/:workflow_name/new.json' do
  rest_helper.handle_request(request) do |fields|
    workflow = api.create_workflow({'workflow' => {'name' => params['workflow_name']}})
    workflow.name
  end
end

# status for existing workflow
get '/workflow/:workflow_name/status.json' do
  rest_helper.handle_request(request ) do |fields|
    api.get_workflow_status(params['workflow_name'])
  end
end

# update workflow: run
get '/workflow/:workflow_name/run.json' do
  rest_helper.handle_request(request) do |fields|
    api.run_workflow(params['workflow_name'])
  end
end

# update workflow: finish
get '/workflow/:workflow_name/finish.json' do
  rest_helper.handle_request(request) do |fields|
    api.finish_workflow(params['workflow_name'])
  end
end

# update workflow: stop
get '/workflow/:workflow_name/stop.json' do
  rest_helper.handle_request(request) do |fields|
    api.stop_workflow(params['workflow_name'])
  end
end

#------------------------------
#
# workflow actions
#
#------------------------------

# list of defined action classes
get '/actions/defined.json' do
  rest_helper.handle_request(request) do |fields|
    api.get_defined_actions
  end
end

# Trigger a collect
get '/actions/trigger_collect.json' do
  rest_helper.handle_request(request) do |fields|
    api.trigger_collect(params['name'])
  end
end

# list of workflow actions with status
get '/workflow/:workflow_name/actions.json' do
  rest_helper.handle_request(request) do |fields|
    api.get_workflow_actions(params['workflow_name'])
  end
end

# status for existing workflow action
get '/workflow/:workflow_name/action/:action_name/status.json' do
  rest_helper.handle_request(request) do |fields|
    api.get_workflow_action_status(params['workflow_name'], params['action_name'])
  end
end

# edit form for new workflow action
get '/workflow/:workflow_name/action/config.json' do
  rest_helper.handle_request(request) do |fields|
    api.new_workflow_action_config(params['workflow_name'],fields['type'] )
  end
end

# edit form for existing workflow action
get '/workflow/:workflow_name/action/:action_name/description.json' do
  rest_helper.handle_request(request) do |fields|
    api.get_workflow_action_description(params['workflow_name'], params['action_name'])
  end
end

get '/workflow/:workflow_name/action/:action_name/config.json' do
  rest_helper.handle_request(request) do |fields|
    api.get_workflow_action_config(params['workflow_name'], params['action_name'])
  end
end

# submit params to create workflow action
post '/workflow/:workflow_name/action/config.json' do
  rest_helper.handle_request(request) do |fields|
    type = fields.delete 'type'
    api.create_workflow_action_config(params['workflow_name'], type, fields)
  end
end

# submit params to change existing action config
post '/workflow/:workflow_name/action/:action_name/config.json' do
  rest_helper.handle_request(request) do |fields|
    api.update_workflow_action_config(params['workflow_name'], params['action_name'], fields )
  end
end

#---------------------
#
# documents
#
#---------------------

get '/documents.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'type')
    doc_type = params['type']


    begin_ts = Time.parse(params['begin_ts']) if params.include? 'begin_ts'
    end_ts = Time.parse(params['end_ts']) if params.include? 'end_ts'
    start_index = params['start_index'].to_i if params.include? 'start_index'
    max_returns = params['max_returns'].to_i if params.include? 'max_returns'

    api.get_documents(doc_type, begin_ts, end_ts, start_index, max_returns)
  end
end

get '/document.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, %w(id type))

    doc_id = params['id']
    doc_type = params['type']

    api.get_document(doc_id, doc_type)
  end
end

get '/documents/failures.json' do
  rest_helper.handle_request(request) do |_fields|
    api.get_failed_documents
  end
end


#---------------------
#
# Version
#
#---------------------

get '/version.json' do
  rest_helper.handle_request(request) do |_fields|
    api.get_version
  end
end

#---------------------
#
# User/Group/Role
#
#---------------------

get '/users.json' do
  rest_helper.handle_request(request) do |_fields|
    api.get_users
  end
end

get '/user/:user_id.json' do
  rest_helper.handle_request(request) do |_fields|
    api.get_user(params['user_id'])
  end
end

put '/user/:user_id.json' do
  rest_helper.handle_request(request) do |fields|
    api.update_user(params['user_id'], fields)
  end
end

post '/user/create.json' do
  rest_helper.handle_request(request) do |fields|
    api.create_user(fields)
  end
end

get '/user/:user_id/join_group.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'group_id')
    api.user_join_group(params['user_id'], params['group_id'])
  end
end

get '/user/:user_id/leave_group.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'group_id')
    api.user_leave_group(params['user_id'], params['group_id'])
  end
end

get '/user/:user_id/add_role.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'role_key')
    api.user_add_role(params['user_id'], params['role_key'])
  end
end

get '/user/:user_id/remove_role.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'role_key')
    api.user_remove_role(params['user_id'], params['role_key'])
  end
end

delete '/user/:user_id.json' do
  rest_helper.handle_request(request) do |_fields|
    api.delete_user(params['user_id'])
  end
end

get '/user/:user_id/reset_password.json' do
  rest_helper.handle_request(request) do |_fields|
    api.user_reset_password(params['user_id'])
  end
end

get '/user/:user_id/lock.json' do
  rest_helper.handle_request(request) do |_fields|
    api.user_lock(params['user_id'])
  end
end

get '/user/:user_id/unlock.json' do
  rest_helper.handle_request(request) do |_fields|
    api.user_unlock(params['user_id'])
  end
end

get '/user/:user_id/enable.json' do
  rest_helper.handle_request(request) do |_fields|
    api.user_enable(params['user_id'])
  end
end

get '/user/:user_id/disable.json' do
  rest_helper.handle_request(request) do |_fields|
    api.user_disable(params['user_id'])
  end
end

get '/groups.json' do
  rest_helper.handle_request(request) do |_fields|
    api.get_groups
  end
end

get '/group/:group_id.json' do
  rest_helper.handle_request(request) do |_fields|
    api.get_group(params['group_id'])
  end
end

put '/group/:group_id.json' do
  rest_helper.handle_request(request) do |fields|
    api.update_group(params['group_id'], fields)
  end
end

get '/group/:group_id/add_user.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'user_id')
    api.group_add_user(params['group_id'], params['user_id'])
  end
end

get '/group/:group_id/remove_user.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'user_id')
    api.group_remove_user(params['group_id'], params['user_id'])
  end
end

post '/group/create.json' do
  rest_helper.handle_request(request) do |fields|
    api.create_group(fields)
  end
end

get '/group/:group_id/add_role.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'role_key')
    api.group_add_role(params['group_id'], params['role_key'])
  end
end

get '/group/:group_id/remove_role.json' do
  rest_helper.handle_request(request) do |_fields|
    api.check_params(params, 'role_key')
    api.group_remove_role(params['group_id'], params['role_key'])
  end
end

delete '/group/:group_id.json' do
  rest_helper.handle_request(request) do |_fields|
    api.delete_group(params['group_id'])
  end
end

get '/roles.json' do
  rest_helper.handle_request(request) do |_fields|
    api.get_roles
  end
end


#---------------------
#
# Authentication
#
#---------------------