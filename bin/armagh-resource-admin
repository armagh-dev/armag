#!/usr/bin/env ruby

# Copyright 2017 Noragh Analytics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'sinatra'
require 'thin'
require 'json'
require 'log4r'

require_relative '../lib/environment.rb'
Armagh::Environment.init

require_relative '../lib/admin/resource/api.rb'
require_relative '../lib/admin/resource/thin_backend.rb'
require_relative '../lib/configuration/file_based_configuration.rb'
require_relative '../lib/logging'

require_relative '../lib/utils/rest_helper'

Process.setproctitle(File.basename(__FILE__))

#------------------------------------------------------------------------------------------------
#
# SET UP ENVIRONMENT
#
#------------------------------------------------------------------------------------------------

include Armagh

api = Admin::Resource::API.instance
rest_helper = Utils::RestHelper.new(api.logger)

configure do

  if ENV[ 'ARMAGH_ENV' ] == 'PRODUCTION'
    set :environment, :production
  else
    set :environment, :development
    set :show_exceptions, :after_handler
  end

  set :bind,   api.ip
  set :port,   api.port
  set :server, "thin"
  set :root,   api.root_directory
  set :run,    true
  class << settings

    def server_settings

      api = Admin::Resource::API.instance

      settings = { :backend => Admin::Resource::ThinBackend }
      if api.using_ssl?
        settings.merge!( {
          :private_key_file => api.key_filepath,
          :cert_chain_file  => api.cert_filepath,
          :verify_peer      => api.verify_peer
        })
      end
      settings
    end
  end
end # end configure

enable :sessions, :logging

set :session_secret, 'arm-l&bjq&7em+r)4a%#$3zzig0*=_#gnm57))*1*010_m(kn-u#$e'

use Rack::CommonLogger, api.logger

use Rack::Auth::Basic, 'Armagh Resource Admin' do |username, password|
  api.authenticate_and_authorize username, password
end # use Rack::Auth::Basic

helpers do
end


helpers do
  def route_after_success(format, message, html_redirect_to, helper)
    case format
      when 'json'
        helper.respond_success(message)
      when 'html'
        session['message'] = message
        redirect to(html_redirect_to)
    end
  end

  def route_after_error(format, error, html_redirect_to, helper)
    case format
      when 'json'
        helper.respond_exception(error, 'ERROR')
      when 'html'
        session['message'] = error.message
        redirect to(html_redirect_to)
    end
  end
end

#------------------------------------------------------------------------------------------------
#
# GET /
#
#------------------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------------------
#
# GET /noop
#
#------------------------------------------------------------------------------------------------
get '/noop.?:format?' do
  begin
    message = session.delete 'message'

    case params['format']
      when 'json'
        return [200, {result: 'way to go!'}.to_json]
      when 'html'
        erb '/views-subdir/page.html'.to_sym #.erb
    end
  rescue => e
    rest_helper.respond_exception(e, 'Noop Failure')
  end
end

post '/noop.?:format?' do
  obj_params = params['form_object']
  begin
    do_something(obj_params)
    route_after_success(params['format'], 'You did something right!', '/noop', rest_helper)
  rescue => e
    route_after_error(params['format'], e, '/some/url', rest_helper)
  end
end