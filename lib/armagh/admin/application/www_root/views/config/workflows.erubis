<script type="text/javascript" src="/ui/js/components/upload.min.js"></script>

{{ bad_count = @data[:workflows].select { |wf| !wf['valid'] && !wf['retired'] }.size }}
{{ unless bad_count.zero? }}
  <div class="uk-alert uk-alert-danger uk-margin-top-remove" data-uk-alert>
    <a href="" class="uk-alert-close uk-close"></a>
    <i class="uk-icon-exclamation-circle uk-icon-small uk-margin-small-right"></i>
    <strong>{{= bad_count }}</strong> workflow{{= bad_count > 1 ? 's are' : ' is' }} not valid and {{= bad_count > 1 ? 'have' : 'has' }} been identified below.
  </div>
{{ end }}

<div id="status-change-errors">
</div>

{{= partial :header, data: {title: 'Workflows', subtitle: "#{@data[:workflows].size} defined", right:
  '<button id="show-retired" onclick="toggle_retired_workflows(this)" class="uk-button uk-button-small" title="Show retired workflows">' +
    'Show Retired' +
  '</button>'} }}

{{ if !@data[:workflows] || @data[:workflows].empty? }}

  <div class="uk-panel uk-panel-box uk-margin-bottom">
    No workflows have been defined yet.
  </div>

{{ else }}

  <style>
    table th:first-child,
    table td:first-child {
      width: 5px;
      padding-right: 0px;
    }
    table td:last-child {
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }
    table tr {
      cursor: default;
    }

    #workflow-options {
      pointer-events: none;
    }
    #workflow-options label {
      cursor: pointer;
    }

    #workflow-options ul li[id$="disabled"] {
      color: #999;
      padding: 5px 15px;
      cursor: not-allowed;
    }
    #workflow-options ul li[id$="enabled"] {
      display: none;
    }
  </style>

  <table class="uk-table uk-table-hover uk-table-condensed">
    <thead>
      <tr class="uk-text-small">
        <th>
          <input id="select-all" type="checkbox" onclick="this.checked = !this.checked">
        </th>
        <th>Workflow</th>
        <th>In Process</th>
        <th>Failed</th>
        <th>Error Alerts</th>
        <th>Warn Alerts</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>

      {{ @data[:workflows].each do |workflow| }}
        {{ uuid = SecureRandom.uuid }}
        {{ valid = workflow['valid'] }}
        {{ retired = workflow['retired'] }}

        <tr {{= 'class="uk-text-muted"' if retired }}>
          <td>
            <input id="select-workflow-{{= uuid }}" type="checkbox" onclick="this.checked = !this.checked">
            <input id="workflow-retired-{{= uuid }}" type="hidden" value="{{= retired }}">
          </td>
          <td>
            {{ if valid || retired }}
              <i class="uk-icon-sitemap {{= retired ? 'uk-text-muted' : 'uk-text-success' }}"></i>
            {{ else }}
              <i class="uk-icon-exclamation-circle uk-text-danger"></i>
            {{ end }}
            <a href="/config/{{= workflow['name'] }}" onclick="select_workflow($('#select-workflow-{{= uuid }}').prop('checked', !$('#select-workflow-{{= uuid }}').prop('checked')))" class="{{= retired ? 'uk-text-muted' : (valid ? '' : 'uk-text-danger') }}">
              {{== workflow['name'] }}
            </a>
          </td>
          <td id="count-in-process-{{= uuid }}">{{= workflow['documents_in_process'] }}</td>
          <td id="count-failed-{{= uuid }}">{{= workflow['failed_documents'] }}</td>
          <td id="count-error-alerts-{{= uuid }}">{{= workflow['error_alerts'] }}</td>
          <td id="count-warn-alerts-{{= uuid }}">{{= workflow['warn_alerts'] }}</td>
          <td>
            <input id="workflow-{{= uuid }}" type="hidden" value="{{= workflow['name'] }}">
            <input id="active-status-{{= uuid }}" type="hidden" value="{{= workflow['run_mode'] }}">
            <span id="status-icon-{{= uuid }}">
              {{ if retired }}
                <i class="uk-icon-remove"></i>
                Retired
              {{ else }}
                {{ case workflow['run_mode'] }}
              {{ when 'running' }}
                  <span class="uk-text-success">
                    <i class="uk-icon-toggle-on uk-text-bold"></i>
                    Running
                  </span>
                {{ when 'stopping' }}
                  <i class="uk-icon-circle-o-notch uk-icon-spin uk-text-bold"></i>
                  Stopping
                {{ when 'stopped' }}
                  <i class="uk-icon-toggle-off uk-text-bold"></i>
                  Stopped
                {{ end }}
              {{ end }}
            </span>
          </td>
        </tr>

      {{ end }}

    </tbody>
  </table>

{{ end }}

<div class="uk-grid">
  <div class="uk-width-1-3">

    <div id="workflow-options" class="uk-button-dropdown" data-uk-dropdown="{mode:'click'}">
      <button id="workflow-dropdown" class="uk-button" disabled>
        <label>None Selected</label>
        <i class="uk-icon-caret-down"></i>
      </button>
      <div class="uk-dropdown uk-dropdown-small uk-dropdown-bottom uk-dropdown-close">
        <ul class="uk-nav uk-nav-dropdown" style="text-align:left;">

          <li id="workflow-run-disabled">
            <i class="uk-icon-play-circle uk-margin-small-right"></i>
            Start
          </li>
          <li id="workflow-run-enabled">
            <a onclick="run_stop_selected_workflows(true)">
              <i class="uk-icon-play-circle uk-margin-small-right"></i>
              Start
            </a>
          </li>

          <li id="workflow-stop-disabled">
            <i class="uk-icon-stop-circle uk-margin-small-right"></i>
            Stop
          </li>
          <li id="workflow-stop-enabled">
            <a onclick="run_stop_selected_workflows(false)">
              <i class="uk-icon-stop-circle uk-margin-small-right"></i>
              Stop
            </a>
          </li>

          <li class="uk-nav-divider"></li>

          <li id="workflow-export-disabled">
            <i class="uk-icon-upload uk-margin-small-right"></i>
            Export
          </li>
          <li id="workflow-export-enabled">
            <a onclick="export_workflows()">
              <i class="uk-icon-upload uk-margin-small-right"></i>
              Export
            </a>
          </li>

          <li class="uk-nav-divider"></li>

          <li id="workflow-retire-disabled">
            <i class="uk-icon-remove uk-margin-small-right"></i>
            Retire
          </li>
          <li id="workflow-retire-enabled">
            <a onclick="retire_workflows(true)">
              <i class="uk-icon-remove uk-margin-small-right"></i>
              Retire
            </a>
          </li>

          <li id="workflow-unretire-disabled">
            <i class="uk-icon-undo uk-margin-small-right"></i>
            Unretire
          </li>
          <li id="workflow-unretire-enabled">
            <a onclick="retire_workflows(false)">
              <i class="uk-icon-undo uk-margin-small-right"></i>
              Unretire
            </a>
          </li>

        </ul>
      </div>
    </div>

  </div>
  <div class="uk-width-1-3 uk-text-center">

  </div>
  <div class="uk-width-1-3 uk-text-right">

    <a href="/config/new" class="uk-button">
      New Workflow
    </a>
    <button class="uk-button uk-margin-small-left" data-uk-modal="{target:'#import-modal'}">
      <i class="uk-icon-download"></i>
      Import
    </button>

  </div>
</div>

<div id="import-modal" class="uk-modal">
  <div class="uk-modal-dialog">
    <button class="uk-modal-close uk-close"></button>
    <div class="uk-modal-header">
      <h3>Import Workflow(s)</h3>
    </div>
    <div id="upload-drop" class="uk-placeholder uk-text-center">
      <i class="uk-icon-cloud-upload uk-icon-medium uk-text-muted uk-margin-small-right"></i>
      Drop one or more JSON workflow files here or
      <a class="uk-form-file">
        select one
        <input id="upload-select" type="file">
      </a>
    </div>
    <div id="progressbar" class="uk-progress uk-hidden">
      <div class="uk-progress-bar" style="width: 0%;">0%</div>
    </div>
    <div class="uk-modal-footer uk-text-right">
      <button id="import-close" class="uk-button uk-modal-close">Cancel</button>
    </div>
  </div>
</div>

<script type="text/javascript">
  var cancel_wait_modal = false
  $(function() {
    var progressbar = $("#progressbar"),
        bar         = progressbar.find(".uk-progress-bar"),
        settings    = {
          action: "/config/import",
          allow: "*.json",
          single: false,
          loadstart: function() {
            bar.css("width", "0%").text("0%")
            progressbar.removeClass("uk-hidden")
          },
          progress: function(percent) {
            percent = Math.ceil(percent)
            bar.css("width", percent + "%").text(percent + "%")
            if (percent == 100) {
              setTimeout(function() {
                progressbar.addClass("uk-hidden")
                if (cancel_wait_modal) {
                  cancel_wait_modal = false
                } else {
                  show_wait_modal('Importing workflows... Please wait...')
                }
              }, 1000)
            }
          },
          allcomplete: function(response) {
            cancel_wait_modal = true
            bar.css("width", "100%").text("100%")
            hide_wait_modal()

            response = JSON.parse(response)
            var message = '',
                success = response['imported'].length > 0,
                error   = response['errors'].length > 0

            if (success && error) {
              message =
                '<p class="uk-text-large">' +
                  '<i class="uk-icon-exclamation-triangle uk-text-warning uk-icon-small uk-margin-small-right"></i>' +
                  'Import partially complete.' +
                '</p>'
            } else if (success) {
              message =
                '<p class="uk-text-large">' +
                  '<i class="uk-icon-check uk-text-success uk-icon-small uk-margin-small-right"></i>' +
                  'Import complete.' +
                '</p>'
            } else if (error) {
              message =
                '<p class="uk-text-large">' +
                  '<i class="uk-icon-exclamation-triangle uk-text-danger uk-icon-small uk-margin-small-right"></i>' +
                  'Import failed.' +
                '</p>'
            }

            response['imported'].forEach(function(item) {
              message += '<p class="uk-text-success">Successfully imported <strong>' + item['workflow']['name'] + '</strong> with the following actions: <i>' + item['actions'].join(', ') + '</i>.</p>'
            })

            response['errors'].forEach(function(item) {
              message += '<p class="uk-text-danger">' + item + '</p>'
            })

            var modal = UIkit.modal.alert(message)
            modal.on({
              'hide.uk.modal': function() {
                if (success) {
                  location.reload()
                }
                reset_import_file_upload(settings)
              }
            })
          }
        }

    var select = UIkit.uploadSelect($("#upload-select"), settings),
        drop   = UIkit.uploadDrop($("#upload-drop"), settings)
  })

  function reset_import_file_upload(settings) {
    $('#upload-select').val('')
    select = UIkit.uploadSelect($("#upload-select"), settings)
    drop   = UIkit.uploadDrop($("#upload-drop"), settings)
  }

  $(document).ready(function() {
    $('table tr').each(function(_index, tr) {
      var chk = $(tr).find('th:first-child, td:first-child').find('input[type="checkbox"]'),
          id  = chk.prop('id')
      tr.onclick = function() {
        chk.prop('checked', !chk.prop('checked'))
        if (id == 'select-all') {
          select_all(chk.prop('checked'))
        } else {
          select_workflow(chk)
        }
      }
    })
    update_toggle_buttons()
    update_show_retired_button()
  })

  function click_add_new_action_type(link) {
    var url = $(link).attr('url')
    if ($("#new-action").attr("disabled")) {
      UIkit.modal.alert("Please stop this workflow before adding new actions to it.")
      return false
    } else {
      location.href = url
    }
  }

  function select_all(checked) {
    var chks = $("input[id^='select-workflow']")
    chks.each(function(_index, chk) {
      $(chk).prop('checked', checked)
      var id = $(chk).prop('id').replace(/select-workflow-/, '')
    })
    update_toggle_buttons()
  }

  function select_workflow(chk) {
    $(chk).prop('checked', chk.checked)
    var id  = $(chk).prop('id').replace(/select-workflow-/, ''),
        all = $('input[id^="select-workflow"]:checked').length == {{= @data[:workflows].size }}
    $("#select-all").prop('checked', all)
    update_toggle_buttons()
  }

  function toggle_workflow_select(id) {
    var chk = $('#select-workflow-' + id)
    chk.prop('checked', !chk.prop('checked'))
    select_workflow(chk)
  }

  function update_toggle_buttons() {
    var any_checked  = false,
        any_active   = false,
        any_inactive = false,
        any_retired  = false,
        any_enabled  = false

    var cks = $('input[id^="select-workflow"]:checked')
    cks.each(function(_index, chk) {
      var id = $(chk).prop('id').replace(/select-workflow-/, '')
      any_checked    = true
      if ($('#active-status-' + id).val() != 'stopped') {
        any_active   = true
      } else {
        any_inactive = true
      }
      if ($('#workflow-retired-' + id).val() == 'true') {
        any_retired = true
      } else {
        any_enabled = true
      }
    })

    var dropdown = $('#workflow-dropdown')

    if (any_checked) {
      dropdown.prop('disabled', false)
      dropdown.find('label').html(cks.length + ' Selected')
      $('#workflow-options').css('pointer-events', 'auto')
    } else {
      dropdown.prop('disabled', true)
      dropdown.find('label').html('None Selected')
      $('#workflow-options').css('pointer-events', 'none')
    }

    if (any_retired && any_enabled) {           // mix of retired and unretired
      enable_dropdown_item('retire', true)
      enable_dropdown_item('unretire', true)
    } else if (any_retired) {                   // only retired
      enable_dropdown_item('retire', false)
      enable_dropdown_item('unretire', true)
    } else if (any_enabled) {                   // only unretired
      enable_dropdown_item('retire', true)
      enable_dropdown_item('unretire', false)
    }

    if (!any_checked) {                         // none selected
      enable_dropdown_item('run', false)
      enable_dropdown_item('stop', false)
      enable_dropdown_item('export', false)
      enable_dropdown_item('retire', false)
      enable_dropdown_item('unretire', false)
    } else if (any_active && any_inactive) {    // mix of active and inactive
      enable_dropdown_item('run', true)
      enable_dropdown_item('stop', true)
      enable_dropdown_item('export', true)
    } else if (any_active) {                    // only active
      enable_dropdown_item('run', false)
      enable_dropdown_item('stop', true)
      enable_dropdown_item('export', true)
      enable_dropdown_item('retire', false)
      enable_dropdown_item('unretire', false)
    } else if (any_inactive) {                  // only inactive
      enable_dropdown_item('run', true)
      enable_dropdown_item('stop', false)
      enable_dropdown_item('export', true)
    }

    if (any_retired && any_enabled) {           // mix of retired and unretired
    } else if (any_retired) {                   // only retired
      enable_dropdown_item('run', false)
      enable_dropdown_item('stop', false)
    } else if (any_enabled) {                   // only unretired
    }
  }

  function enable_dropdown_item(item, enable) {
    if (enable) {
      $('#workflow-' + item + '-disabled').hide()
      $('#workflow-' + item + '-enabled').show()
    } else {
      $('#workflow-' + item + '-disabled').show()
      $('#workflow-' + item + '-enabled').hide()
    }
  }

  var queue = []

  function run_stop_selected_workflows(run, prompt = true) {
    if (run) {
      prompt = false
    } else if (!run && prompt) {
      UIkit.modal.confirm('Stop selected workflows?', function() {
        run_stop_selected_workflows(run, false)
      })
    }
    if (prompt) {
      return
    }

    show_wait_modal((run ? 'Starting' : 'Stopping') + ' workflows... Please wait...')

    var cks = $('input[id^="select-workflow"]:checked')
    queue   = []

    cks.each(function(_index, chk) {
      var id = $(chk).prop('id').replace(/select-workflow-/, ''),
          st = $('#active-status-' + id).val(),
          retired = $('#workflow-retired-' + id).val() == 'true'

      if ((run && st != 'stopped') || (!run && st == 'stopped') || retired) {
        return
      }

      queue.push(id)
    })

    process_run_stop_queue(run)
  }

  function process_run_stop_queue(run, success = [], stopping = [], failed = {}) {
    if (queue == undefined || queue.length == 0) {
      hide_wait_modal()
      update_toggle_buttons()

      var message = ''

      if (success.length > 0) {
        message += 'Successfully ' + (run ? 'started' : 'stopped') + ' ' + success.length + ' workflow(s).' +
          '<div class="uk-text-success uk-text-bold uk-margin-top">' +
            success.join('<br />') +
          '</div>'
      }

      if (stopping.length > 0) {
        if (success.length > 0) {
          message += '<br />'
        }
        message += 'Still stopping ' + stopping.length + ' workflow(s).' +
          '<div class="uk-text-bold uk-margin-top">' +
            stopping.join('<br />') +
          '</div>'
      }

      if (Object.keys(failed).length > 0) {
        if (success.length > 0) {
          message += '<br />'
        }
        message += 'Failed to ' + (run ? 'start' : 'stop') + ' ' + Object.keys(failed).length + ' workflow(s).' +
          '<div class="uk-text-danger uk-margin-top">'
            $.each(failed, function(key, value) {
              message += '<span class="uk-text-bold">' + key + '</span>: ' + value + '<br />'
            })
        message += '</div>'
      }

      UIkit.modal.alert(message)

      return
    }

    var id    = queue.shift(),
        wf    = $('#workflow-' + id).val(),
        state = ''

    if (run) {
      state = 'run'
    } else {
      state = 'stop'
    }

    $.ajax({
      type: 'PATCH',
      url: '/config/' + wf + '/' + state + '?id=' + id,
      success: function(data, text) {

        data = JSON.parse(data)
        var id       = data[0],
            status   = data[1],
            response = data[2],
            run_mode = response['run_mode']

        if (status == 'success') {
          $('#active-status-' + id).val(run_mode)
          var span = $('#status-icon-' + id)

          switch(run_mode) {
            case 'running':
              success.push(wf)
              span.html('<span class="uk-text-success"><i class="uk-icon-toggle-on uk-text-bold"></i> Running</span>')
              break
            case 'stopping':
              stopping.push(wf)
              span.html('<i class="uk-icon-circle-o-notch uk-icon-spin uk-text-bold"></i> Stopping')
              break
            case 'stopped':
              success.push(wf)
              span.html('<i class="uk-icon-toggle-off uk-text-bold"></i> Stopped')
              break
          }

          $('count-in-process-' + id).val(data['documents_in_process'])
          $('count-failed-' + id).val(data['failed_documents'])
          $('count-error-alerts-' + id).val(data['error_alerts'])
          $('count-warn-alerts-' + id).val(data['warn_alerts'])
        } else {
          failed[wf] = response
        }

        process_run_stop_queue(run, success, stopping, failed)

      },
      error: function(request, status, error) {
        hide_wait_modal()
        UIkit.modal.alert(
          '<span class="uk-text-danger">' +
            '<i class="uk-icon-warning uk-icon-small uk-margin-small-right"></i>' +
            'Unable to ' + state + ' workflow <strong>' + wf + '</strong>: ' + error +
          '</span>'
        )
      }
    })
  }

  function export_workflows() {
    var workflows = $('input[id^="select-workflow"]:checked')

    workflows.each(function(_index, chk) {
      var id        = chk.id.replace(/^select-workflow-/, ''),
          workflow  = $('#workflow-' + id).val(),
          timestamp = Math.floor(Date.now() / 1000)
          url       = '/config/' + workflow + '/export?ts=' + timestamp
      window.open(url)
    })
  }

  function retire_workflows(retire, prompt = true) {
    if (retire && prompt) {
      UIkit.modal.confirm(
        '<i class="uk-icon-question-circle uk-icon-large uk-text-warning uk-margin-right"></i>' +
        'Are you sure you want to retire selected workflows?',
        function() {
          retire_workflows(retire, false)
        }
      )
      return false
    }

    var cks     = $('input[id^="select-workflow"]:checked'),
        success = [],
        failed  = {}

    if (cks.length == 0) {
      UIkit.modal.alert('No workflows selected.')
      return false
    }

    show_wait_modal((retire ? 'Re' : 'Unre') + 'tiring workflows... Please wait...')

    localStorage['workflow-retire-counter'] = cks.length

    cks.each(function(_index, chk) {
      var id = chk.id.replace(/^select-workflow-/, ''),
          wf = $('#workflow-' + id).val(),
          st = $('#active-status-' + id).val(),
          retired = $('#workflow-retired-' + id).val() == 'true'

      if (st != 'stopped' || retire == retired) {
        update_retire_outcome(retire, success, failed)
        return
      }

      $.ajax({
        type: 'PATCH',
        url: '/config/' + wf + '/' + (retire ? '' : 'un') + 'retire',
        success: function(data, text) {
          data = JSON.parse(data)
          var status   = data[0],
              response = data[1]
          if (status == 'success') {
            success.push(wf)
            update_retire_outcome(retire, success, failed)
          } else {
            failed[wf] = response
            update_retire_outcome(retire, success, failed)
          }
        }
      })
    })
  }

  function update_retire_outcome(retire, success, failed) {
    localStorage['workflow-retire-counter'] -= 1
    if (localStorage['workflow-retire-counter'] > 0) {
      return
    }
    localStorage.removeItem('workflow-retire-counter')
    hide_wait_modal()

    var message = ''

    if (success.length > 0) {
      message += 'Successfully ' + (retire ? '' : 'un') + 'retired ' + success.length + ' workflow(s).' +
        '<div class="uk-text-success uk-text-bold uk-margin-top">' +
          success.join('<br />') +
        '</div>'
    }

    if (Object.keys(failed).length > 0) {
      if (success.length > 0) {
        message += '<br />'
      }
      message += 'Failed to ' + (retire ? '' : 'un') + 'retire ' + Object.keys(failed).length + ' workflow(s).' +
        '<div class="uk-text-danger uk-margin-top">'
          $.each(failed, function(key, value) {
            message += '<span class="uk-text-bold">' + key + '</span>: ' + value + '<br />'
          })
      message += '</div>'
    }

    var modal = UIkit.modal.alert(message)

    if (success.length > 0) {
      modal.on({
        'hide.uk.modal': function() {
          location.reload()
        }
      })
    }
  }

  function update_show_retired_button() {
    if ({{= @data[:show_retired] == true }}) {
      $('#show-retired')
        .removeClass('uk-button-primary')
        .removeClass('uk-active')
        .addClass('uk-button-primary')
        .addClass('uk-active')
        .prop('title', 'Click to hide retired actions')
        .text('Hide Retired')
    } else {
      $('#show-retired')
        .removeClass('uk-button-primary')
        .removeClass('uk-active')
        .prop('title', 'Click to show retired actions')
        .text('Show Retired')
    }
  }

  function toggle_retired_workflows(toggle) {
    var show_retired = !$(toggle).hasClass('uk-active')
    $.ajax({
      type: 'PATCH',
      url: '/session?show_retired=' + show_retired,
      success: function(data, text) {
        location.reload()
      },
      error: function(request, status, error) {
        UIkit.modal.alert('<span class="uk-text-danger">Unable to set show retired: ' + error + '</span>')
      }
    })
  }
</script>
