<script type="text/javascript" src="/ui/js/components/tooltip.min.js"></script>
<script type="text/javascript" src="/ui/js/components/pagination.min.js"></script>

{{= partial :header, data: {title: 'Logs', subtitle: "Showing #{@data[:logs].size} entries (#{@data[:skip] + (@data[:logs].size.zero? ? 0 : 1)} through #{@data[:skip] + @data[:logs].size}) out of #{@data[:count]}"} }}

{{ columns = %w(timestamp component level message workflow action action_supertype hostname pid document_internal_id alert) }}

<div id="logs-container" class="uk-overflow-container" style="min-height:580px;">
  <table class="uk-table uk-table-hover uk-table-condensed uk-text-small uk-text-nowrap uk-margin-remove">

    <caption>
      <div>
        {{ unless @data[:filter].to_s.gsub(/\x19/, '').empty? }}
          <button class="uk-button uk-button-mini uk-margin-right" onclick="clear_filter()" style="width:50px;">
            Clear
            <i class="uk-icon-filter"></i>
          </button>
        {{ end }}
        {{ @data[:filter]&.split("\x19")&.each do |column| }}
          {{ column, value = column.split("\x11") }}
          {{ next unless value }}
          {{= column }}: <a href="javascript:" onclick="filter('{{= column }}', '{{= value }}')">{{= value }}</a>
          <button class="uk-button uk-button-mini uk-margin-right" onclick="filter('{{= column }}', '', true)"><i class="uk-icon-close"></i></button>
        {{ end }}
      </div>
      <div class="uk-margin-small-top">
        {{ unless @data[:hide].to_s.gsub(/\x19/, '').empty? }}
          <button class="uk-button uk-button-mini uk-margin-right" onclick="show_hidden()" style="width:50px;">Unhide</button>
        {{ end }}
        {{ @data[:hide]&.split("\x19")&.each do |column| }}
          {{ next if column.empty? }}
          {{ columns.delete column }}
          {{= column }}: hidden
          <button class="uk-button uk-button-mini uk-margin-right" onclick="hide('{{= column }}', true)"><i class="uk-icon-close"></i></button>
        {{ end }}
      </div>
    </caption>

    <thead>
      {{ columns.each do |column| }}
        <th>
          {{= column.split('_').map { |c| c.capitalize }.join(' ') }}
          {{ active_filter = '' }}
          {{ @data[:filter]&.split("\x19")&.each do |filter_column| }}
            {{ next if filter_column.empty? }}
            {{ filter_column = filter_column.split("\x11").first }}
            {{ active_filter = 'uk-text-success uk-text-bold' if filter_column == column }}
          {{ end }}
          <div class="uk-button-dropdown" data-uk-dropdown="{mode:'click', boundary:'logs-container'}">
            <button class="uk-button uk-button-mini {{= active_filter }}">
             <i class="uk-icon-filter"></i>
            </button>
            <div class="uk-dropdown uk-dropdown-small uk-text-small uk-dropdown-close" style="font-weight: normal;">
              <ul class="uk-nav uk-nav-dropdown">
                {{ unless %w(alert).include? column }}
                  <li>
                    <a href="javascript:" onclick="filter('{{= column }}')">
                      <i class="uk-icon-filter uk-margin-small-right"></i>
                      Filter...
                    </a>
                  </li>
                {{ end }}

                {{ @data[:filters]&.[](column)&.each do |filter| }}
                  <li>
                    <a href="javascript:" onclick="filter_add('{{= column }}', '{{== column == 'timestamp' ? filter.sub(/\ \(\w+\)$/, '') : filter }}')">
                      {{== filter }}
                    </a>
                  </li>
                {{ end }}

                <li>
                  <a href="javascript:" onclick="hide('{{= column }}')">
                    <i class="uk-icon-eye-slash uk-margin-small-right"></i>
                    Hide
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </th>
      {{ end }}
    </thead>

    <tbody>
      {{ @data[:logs]&.each_with_index do |log, index| }}
        {{ uuid = SecureRandom.uuid }}
        <tr {{= 'class="uk-text-danger uk-text-bold"' if log['alert'] }}>
          {{ columns.each do |column| }}
            <td title="{{== log[column] }}">
              {{ if column == 'message' && log['exception'] }}
                <a href="javascript:" onclick="{{= log['exception'] ? "toggle_exception('#{uuid}')" : ''}}" style="color:inherit;">
                  <i id="icon-{{= uuid }}" class="uk-icon-caret-right"></i>
              {{ end }}
              {{== case column
                   when 'timestamp'
                     log[column].strftime('%m-%d %H:%M:%S.%L')
                   when 'component'
                     split = log[column].split('::')
                     comp  = split.size == 4 ? split[2] : split.last
                     comp == 'ScheduledActionTrigger' ? 'ActionTrigger' : comp
                   when 'message'
                     mesg = "#{log[column][0].upcase}#{log[column][1..-1]}"
                     mesg.size > 100 ? "#{mesg[0..100]}..." : mesg
                   else
                     log[column]
                   end }}
              {{ if column == 'message' && log['exception'] }}
                </a>
              {{ end }}
            </td>
          {{ end }}
        </tr>
        {{ if log['exception'] }}
          <tr id="{{= uuid }}" style="display: none;">
            <td colspan="99" style="white-space: normal;">
              <div class="uk-margin-left uk-margin-bottom">

                {{= partial :logs, :exceptions, data: log['exception'] }}

              </div>
            </td>
          </tr>
        {{ end }}
      {{ end }}
    </tbody>

  </table>
</div>

<div class="uk-grid uk-margin-top uk-form">
  <div class="uk-width-1-5">
    <button class="uk-button" onclick="reload()" title="Refresh" data-uk-tooltip="{animate:true}">
      <i class="uk-icon-refresh"></i>
    </button>
    <button class="uk-button uk-margin-small-left" onclick="page()" title="Go To Page" data-uk-tooltip="{animate:true}">
      <i class="uk-icon-ellipsis-h"></i>
    </button>
  </div>
  <div class="uk-width-3-5 uk-text-center">
    <ul class="uk-pagination" data-uk-pagination="{items:{{= @data[:count] }}, itemsOnPage:{{= @data[:limit] }}, currentPage:{{= @data[:page] - 1 }}, displayedPages:3}"></ul>
  </div>
  <div class="uk-width-1-5 uk-text-right">

    {{ drops = {type:   %w(limit sample),
                prompt: %w(Page Sample),
                value:  [@data[:limit] || 20, @data[:sample] || 10_000],
                values: [[20, 25, 30, 40, 50, 100, 500], [100, 1_000, 10_000, 100_000, 200_000, 300_000]]} }}
    {{ (0..1).each do |i| }}
      {{ drops[:values][i] = (drops[:values][i] << drops[:value][i]).uniq.sort }}
      <select id="query-{{= drops[:type][i]  }}" onchange="select_value(this.value, '{{= drops[:type][i] }}', '{{= "#{drops[:prompt][i].downcase} size" }}')" title="{{= "#{drops[:prompt][i]} Size" }}" data-uk-tooltip="{animate:true}">
        {{ drops[:values][i].each do |v| }}
          {{ selected = drops[:value][i] == v ? 'selected' : '' }}
          <option value="{{= v }}" {{= selected }}>{{= v }}</option>
        {{ end }}
        <option value="">Other...</option>
      </select>
    {{ end }}

  </div>
</div>

<form id="form">
  <input name="page"   type="hidden">
  <input name="limit"  type="hidden" value="{{= @data[:limit] }}">
  <input name="filter" type="hidden" value="{{= @data[:filter] }}">
  <input name="hide"   type="hidden" value="{{= @data[:hide] }}">
  <input name="sample" type="hidden" value="{{= @data[:sample] }}">
</form>

<script type="text/javascript">
  $(document).ready(function() {
    register_resizable_container('#logs-container')
  })

  $('[data-uk-pagination]').on('select.uk.pagination', function(e, pageIndex){
    var page = pageIndex + 1
    if (page == {{= @data[:pages] }}) {
      page = ''
    }
    $('input[name="page"]').val(page)
    submit()
  })

  function select_value(value, id, prompt) {
    var field = $('input[name="' + id + '"]')
    if (!value) {
      UIkit.modal.prompt('Specify <span class="uk-text-primary uk-text-bold">' + prompt + ':</span> ', field.val(), function(new_value) {
        if (!new_value) { return false }
        select_value(new_value, id, prompt)
      })
      $('div[class="uk-modal-dialog"] input[type="text"]').select()
      return false
    }
    field.val(value)
    submit()
  }

  function toggle_exception(id) {
    var row = $('#' + id)
    var ico = $('#icon-' + id)
    if (row.is(':visible')) {
      row.hide()
      ico.attr('class', 'uk-icon-caret-right')
    } else {
      row.show()
      ico.attr('class', 'uk-icon-caret-down')
    }
  }

  function reload() {
    setTimeout('show_wait_modal()', 500)
    location.reload()
  }

  function submit() {
    setTimeout('show_wait_modal()', 500)
    $('#form').submit()
  }

  function page() {
    UIkit.modal.prompt('Go to page:', {{= @data[:page] }}, function(new_page) {
      if (parseInt(new_page) >= {{= @data[:pages] }}) {
        new_page = ''
      }
      $('input[name="page"]').val(new_page)
      submit()
    })

    $('div[class="uk-modal-dialog"] input[type="text"]').select()
  }

  function filter(column, value = '', remove = false) {
    var fil = $('input[name="filter"]')
    var pat = "(?:^|\x19)" + column + "\x11.*?(?:\x19|$)"

    if (remove) {
      fil.val(fil.val().replace(new RegExp(pat), "\x19"))
      submit()
      return
    }

    var prompt = 'Filter <strong class="uk-text-primary">' + column + '</strong>:'
    switch (column) {
      case 'timestamp':
        prompt += ' ' +
          '<span style="font-style:italic;">' +
            '(see the following examples)' +
          '</span>' +
          '<br /><br />' +
          '<table class="uk-text-small"><tr>' +
            '<td class="uk-text-primary">1999-12-31 </td>' +
            '<td class="uk-text-muted">One full day.</td>' +
          '</tr><tr>' +
            '<td class="uk-text-primary">1999-12-31 | 2000-01-01 </td>' +
            '<td class="uk-text-muted">Date range (inclusive).</td>' +
          '</tr><tr>' +
            '<td class="uk-text-primary">1999-12-31 00:00:00.000 | 2000-01-01 23:59:59.999{{= '&nbsp;'*10 }}</td>' +
            '<td class="uk-text-muted">Equivalent to the above.</td>' +
          '</tr><tr>' +
            '<td class="uk-text-primary">12-31 20:30:40.567 </td>' +
            '<td class="uk-text-muted">Year is optional; 12-31 20:30:40.567 only.</td>' +
          '</tr><tr>' +
            '<td class="uk-text-primary">13 | 14:30 </td>' +
            '<td class="uk-text-muted">Date is optional; 13:00:00.000 thru 14:30:59.999.</td>' +
          '</tr><tr>' +
            '<td class="uk-text-primary">15:16:17 </td>' +
            '<td class="uk-text-muted">15:16:17.000 thru 15:16:17.999.</td>' +
          '</tr><tr>' +
            '<td class="uk-text-primary">0 </td>' +
            '<td class="uk-text-muted">00:00:00.000 thru 00:59:59.999.</td>' +
          '</tr></table>' +
          '<br />'
        break
      case 'message':
        prompt += ' ' +
          '<span style="font-style:italic;">' +
            '(will also filter any exceptions and causes including error class)' +
          '</span>'
        break
    }

    UIkit.modal.prompt(prompt, value, function(new_value) {
      filter_add(column, new_value)
    })

    $('div[class="uk-modal-dialog"] input[type="text"]').select()
  }

  function filter_add(column, value) {
    var fil = $('input[name="filter"]')
    var pat = "(?:^|\x19)" + column + "\x11.*?(?:\x19|$)"

    if (!value.trim()) {
      fil.val(fil.val().replace(new RegExp(pat), ''))
    } else if (new RegExp(pat).exec(fil.val())) {
      fil.val(fil.val().replace(new RegExp(pat), "\x19" + column + "\x11" + value + "\x19"))
    } else {
      fil.val(fil.val() + column + "\x11" + value + "\x19")
    }

    submit()
  }

  function hide(column, remove = false) {
    var hid = $('input[name="hide"]')
    if (remove) {
      var pat = "(?:^|\x19)" + column + "(?:\x19|$)"
      hid.val(hid.val().replace(new RegExp(pat), "\x19"))
    } else {
      hid.val(hid.val() + column + "\x19")
    }
    submit()
  }

  function clear_filter() {
    var fil = $('input[name="filter"]')
    fil.val('')
    submit()
  }

  function show_hidden() {
    var hid = $('input[name="hide"]')
    hid.val('')
    submit()
  }
</script>
